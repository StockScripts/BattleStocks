class PurchasedStock < ActiveRecord::Base
  attr_accessible :money_earned, :money_spent, :stock_code, :total_qty, :user_game_id, :value_in_stocks, :get_price

  # Relationships
  # -----------------------------
  has_many :transactions
  belongs_to :user_game

  # Callbacks
  # -----------------------------
  before_create :stock_code_upper

   
  # Validations
  # -----------------------------

  validates_format_of :stock_code, :with => /.+/, :message => "stock_code cannot be blank"
    validates_format_of :money_earned, :money_spent, :total_qty, :value_in_stocks, :with => /^[0-9]\d*/, :message => "should only be integers only without decimals, including 0"
  #/(^[0]{1}$|^[-]?[1-9]{1}\d*$)/
  validates_presence_of :money_earned
  validates_presence_of :money_spent
  validates_presence_of :stock_code
  validates_presence_of :total_qty
  validates_presence_of :user_game_id
  validates_presence_of :value_in_stocks

 #validates_format_of :stock_code, :with => /(?-i)(?<=\s|^)[A-Z]{1,4}(\.[A-#Z]{1,2})?(?=\s|$)/, :message => "invalid stock code"


  # Scope
  # -----------------------------
  scope :for_user_game, lambda { |x| where("user_game_id = ?", x) }
  scope :for_game, lambda { |x| joins(:user_game).where("game_id = ?", x) }
  scope :for_user, lambda { |x| joins(:user_game).where("user_id = ?", x) }

  # Methods
  # -----------------------------
  def stock_code_upper
  	self.stock_code.upcase!
  end

  def get_price
    require 'yahoo_stock'
    return ((YahooStock::Quote.new(:stock_symbols => [self.stock_code]).results(:to_array).output[0][1].to_f) * 100).to_i
  end

end
